# ~/.bashrc: executed by bash(1) for non-login shells.
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
export HISTCONTROL=ignoredups
# ... and ignore same sucessive entries.
export HISTCONTROL=ignoreboth

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# For use in the prompt later
git_branch () {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color)
        color_prompt=yes
        ;;
    *)
        PS1='[${debian_chroot:+($debian_chroot)}\u@\h:\w]$(git_branch)\n% '
        ;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='[${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]]$(git_branch)\n% '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi

unset color_prompt force_color_prompt


# Comment in the above and uncomment this below for a color prompt
#PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '

# If this is an xterm set the title to user@host:dir
case "$TERM" in
    xterm*|rxvt*)
        PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"'
        ;;
    *)
        ;;
esac

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

#if [ -f ~/.bash_aliases ]; then
#    . ~/.bash_aliases
#fi

# enable color support of ls and also add handy aliases
if [ "$TERM" != "dumb" ]; then
    export CLICOLOR=1
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    #alias dir='ls --color=auto --format=vertical'
    #alias vdir='ls --color=auto --format=long'
fi

# some more ls aliases
#alias ls='ls -l --color=auto'
#alias ll='ls -ltr --color=auto'
#alias la='ls -A'
#alias l='ls -CF'
. ${HOME}/.alias.bash
. ${HOME}/.inputrc
# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

export EDITOR=vim
# emacs keybindings
set -o emacs

if [ -e "${HOME}/recovery/server-0_0.xkm" ]; then
    xkbcomp ${HOME}/recovery/server-0_0.xkm $DISPLAY
fi

function .. (){
    local arg=${1:-1};
    local dir=""
    while [ $arg -gt 0 ]; do
        dir="../$dir"
        arg=$(($arg - 1));
    done
    cd $dir >&/dev/null
}

extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)  tar xjvf $1 ;;
            *.tar.bz)   tar xjvf $1 ;;
            *.tar.gz)   tar xvzf $1 ;;
            *.bz2)      bunzip2 $1  ;;
            *.rar)      rar x $1    ;;
            *.gz)       gunzip $1   ;;
            *.tar)      tar xvf $1  ;;
            *.zip)      unzip $1    ;;
            *.Z)        uncompress $1   ;;
            *)      echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

go_go_gadget_etags() {
    CWD=${1?"USAGE: go_go_gadget_etags TARGET_DIR"}
    TAGSDIR=${2-${HOME}/emacs-tags}
    cd ${CWD}
    # etags $(find . -type f | sed 's@\(\s\+\)@\\\1@g')
    etags $(find ${CWD} -follow -type f | xargs -i echo "{}")
    etags --append --include=$(echo ${TAGSDIR}/*tags | sed 's@ @ --include=@g')
}

ccf() {
    TARGET_DIRECTORY=${1:?"What's the directory to clean up, champ?"}
    NUM_CLEANED=$(find ${TARGET_DIRECTORY} -follow -iregex '.*.py[co]' | wc -l)
    find ${TARGET_DIRECTORY} -follow -iregex '.*.py[co]' | xargs rm
    echo "Cleaned ${NUM_CLEANED} files. :)"
}

export WORKON_HOME=$HOME/venvs
if [ -e /usr/local/bin/virtualenvwrapper.sh ]; then
    source /usr/local/bin/virtualenvwrapper.sh
fi

TARGET_DIR=/pluto/local
TARGET_BIN_DIR=${TARGET_DIR}/bin
if [ -e ${TARGET_DIR}/activate-environment ]; then
    source ${TARGET_DIR}/activate-environment
fi

export PATH=${TARGET_BIN_DIR}:${PATH}

if [ -d "${HOME}/aws/scripts" ]; then
    export PATH=${PATH}:${HOME}/aws/scripts
fi

if [ -d ${HOME}/.gem/ruby/1.8/bin/ ]; then
    export PATH=${PATH}:${HOME}/.gem/ruby/1.8/bin
fi

if [ -d /var/lib/gems/1.8/bin/ ]; then
    export PATH=${PATH}:/var/lib/gems/1.8/bin
fi

export LD_LIBRARY_PATH=${TARGET_LIB_DIR}:${LD_LIBRARY_PATH}
export PYTHONPATH=/pluto:/pluto/pycloud
export JDK_HOME=/usr/lib/jvm/java-6-sun
